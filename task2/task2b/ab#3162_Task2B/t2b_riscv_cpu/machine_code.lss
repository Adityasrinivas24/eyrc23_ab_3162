
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
000003a8 l     F .text	0000003c array_index.constprop.0
000003e4 l     F .text	00000048 array_write.constprop.0.isra.0
0000042c l     F .text	00000044 array_write8.constprop.0.isra.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
000003c2 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000478 g     F .text	00000024 memcpy
000003c2  w      .debug_info	00000000 .hidden t1b_path_planner.c.48ad6453
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000470 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000004b8 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
0000049c g     F .text	0000001c memset
00000054 g     F .text	00000354 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000004b8 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    4b800593          	addi	x11,x0,1208
  1c:	    00000613          	addi	x12,x0,0
  20:	    458000ef          	jal	x1,478 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    468000ef          	jal	x1,49c <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    430000ef          	jal	x1,470 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 	return min_index;
     ### }
     ### 
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                fb010113          	addi	x2,x2,-80
  58:	                04812423          	sw	x8,72(x2)
  5c:	                04112623          	sw	x1,76(x2)
  60:	                04912223          	sw	x9,68(x2)
  64:	                05212023          	sw	x18,64(x2)
  68:	                03312e23          	sw	x19,60(x2)
  6c:	                03412c23          	sw	x20,56(x2)
  70:	                03512a23          	sw	x21,52(x2)
  74:	                03612823          	sw	x22,48(x2)
  78:	                03712623          	sw	x23,44(x2)
  7c:	                03812423          	sw	x24,40(x2)
  80:	                03912223          	sw	x25,36(x2)
  84:	                03a12023          	sw	x26,32(x2)
  88:	                01b12e23          	sw	x27,28(x2)
     ###     // index to keep track of the path_planned array
     ###     uint8_t idx = 0;
     ### 
     ### 
     ###     // ############# Add your code here #############
     ###     if(!(30>START_POINT && START_POINT>=0 && 30>END_POINT && END_POINT>=0)) return 0;
  8c:	                02000437          	lui	x8,0x2000
  90:	                00044783          	lbu	x15,0(x8) # 2000000 <__bss_end>
  94:	                01d00713          	addi	x14,x0,29
  98:	                0ff7f793          	andi	x15,x15,255
  9c:	/-------------- 28f76263          	bltu	x14,x15,320 <__ram_size+0x220>
  a0:	|               00044783          	lbu	x15,0(x8)
  a4:	|               00444783          	lbu	x15,4(x8)
  a8:	|               0ff7f793          	andi	x15,x15,255
  ac:	+-------------- 26f76a63          	bltu	x14,x15,320 <__ram_size+0x220>
     ###     
     ###     uint32_t *dist = 0x02000010; // array to store the distance of each vertex, each 32 bit integer stores 8 vertices
     ### 
     ###     // adjacency matrix of the graph
     ###     path_planned[0] = 0b010000000000000000000000000000;
     ###     path_planned[1] = 0b101000000000000000000000000001;
  b0:	|               28000737          	lui	x14,0x28000
  b4:	|               00170713          	addi	x14,x14,1 # 28000001 <__global_pointer$+0x25fff801>
  b8:	|               04e42223          	sw	x14,68(x8)
     ###     path_planned[2] = 0b010100001000000000000000000000;
  bc:	|               14200737          	lui	x14,0x14200
  c0:	|               04e42423          	sw	x14,72(x8)
     ###     path_planned[3] = 0b001010000000000000000000000010;
  c4:	|               0a000737          	lui	x14,0xa000
  c8:	|               00270713          	addi	x14,x14,2 # a000002 <__global_pointer$+0x7fff802>
  cc:	|               04e42623          	sw	x14,76(x8)
     ###     path_planned[4] = 0b000101100000000000000000000000;
  d0:	|               05800737          	lui	x14,0x5800
  d4:	|               04e42823          	sw	x14,80(x8)
     ###     path_planned[5] = 0b000010000000000000000000000000;
     ###     path_planned[6] = 0b000010010000000000000000000000;
  d8:	|               02400737          	lui	x14,0x2400
  dc:	|               04e42c23          	sw	x14,88(x8)
     ###     path_planned[7] = 0b000000101000000000000000000000;
  e0:	|               00a00737          	lui	x14,0xa00
  e4:	|               04e42e23          	sw	x14,92(x8)
     ###     path_planned[8] = 0b001000010100100000000000000000;
  e8:	|               08520737          	lui	x14,0x8520
  ec:	|               06e42023          	sw	x14,96(x8)
     ###     path_planned[9] = 0b000000001011000000000000000000;
  f0:	|               002c0737          	lui	x14,0x2c0
  f4:	|               06e42223          	sw	x14,100(x8)
     ###     path_planned[10] = 0b000000000100000000000000000000;
  f8:	|               00100737          	lui	x14,0x100
  fc:	|               06e42423          	sw	x14,104(x8)
     ###     path_planned[11] = 0b000000000100000000000000000000;
 100:	|               06e42623          	sw	x14,108(x8)
     ###     path_planned[12] = 0b000000001000010000010000000000;
 104:	|               00210737          	lui	x14,0x210
 108:	|               40070713          	addi	x14,x14,1024 # 210400 <__flash_size+0x20fc00>
 10c:	|               06e42823          	sw	x14,112(x8)
     ###     path_planned[13] = 0b000000000000101000000000000000;
 110:	|               00028737          	lui	x14,0x28
 114:	|               06e42a23          	sw	x14,116(x8)
     ###     path_planned[14] = 0b000000000000000110000000000000;
 118:	|               00006737          	lui	x14,0x6
 11c:	|               06e42c23          	sw	x14,120(x8)
     ###     path_planned[15] = 0b000000000000001000000000000000;
 120:	|               00008737          	lui	x14,0x8
 124:	|               06e42e23          	sw	x14,124(x8)
     ###     path_planned[16] = 0b000000000000001001100000000000;
 128:	|               0000a737          	lui	x14,0xa
 12c:	|               80070713          	addi	x14,x14,-2048 # 9800 <__flash_size+0x9000>
 130:	|               08e42023          	sw	x14,128(x8)
     ###     path_planned[17] = 0b000000000000000010000000000000;
 134:	|               00002737          	lui	x14,0x2
 138:	|               08e42223          	sw	x14,132(x8)
     ###     path_planned[18] = 0b000000000000000010010000000000;
 13c:	|               40070713          	addi	x14,x14,1024 # 2400 <__flash_size+0x1c00>
 140:	|               08e42423          	sw	x14,136(x8)
     ###     path_planned[19] = 0b000000000000100000101000000000;
 144:	|               00021737          	lui	x14,0x21
 148:	|               a0070713          	addi	x14,x14,-1536 # 20a00 <__flash_size+0x20200>
 14c:	|               08e42623          	sw	x14,140(x8)
     ###     path_planned[20] = 0b000000000000000000010100100001;
 150:	|               52100713          	addi	x14,x0,1313
 154:	|               08e42823          	sw	x14,144(x8)
     ###     path_planned[21] = 0b000000000000000000001011000000;
 158:	|               2c000713          	addi	x14,x0,704
 15c:	|               08e42a23          	sw	x14,148(x8)
     ###     path_planned[22] = 0b000000000000000000000100000000;
 160:	|               10000713          	addi	x14,x0,256
 164:	|               08e42c23          	sw	x14,152(x8)
     ###     path_planned[23] = 0b000000000000000000000100000000;
 168:	|               08e42e23          	sw	x14,156(x8)
     ###     path_planned[24] = 0b000000000000000000001000010000;
 16c:	|               21000713          	addi	x14,x0,528
     ###     if(!(30>START_POINT && START_POINT>=0 && 30>END_POINT && END_POINT>=0)) return 0;
 170:	|               00444783          	lbu	x15,4(x8)
     ###     path_planned[24] = 0b000000000000000000001000010000;
 174:	|               0ae42023          	sw	x14,160(x8)
     ###     path_planned[25] = 0b000000000000000000000000101000;
 178:	|               02800713          	addi	x14,x0,40
 17c:	|               0ae42223          	sw	x14,164(x8)
     ###     path_planned[26] = 0b000000000000000000000000010110;
 180:	|               01600713          	addi	x14,x0,22
 184:	|               0ae42423          	sw	x14,168(x8)
     ###     path_planned[0] = 0b010000000000000000000000000000;
 188:	|               100007b7          	lui	x15,0x10000
     ###     path_planned[27] = 0b000000000000000000000000001000;
 18c:	|               00800713          	addi	x14,x0,8
     ###     path_planned[0] = 0b010000000000000000000000000000;
 190:	|               04f42023          	sw	x15,64(x8)
     ###     path_planned[27] = 0b000000000000000000000000001000;
 194:	|               0ae42623          	sw	x14,172(x8)
     ###     path_planned[28] = 0b000100000000000000000000001001;
     ###     path_planned[29] = 0b010000000000000000001000000010;
 198:	|               20278793          	addi	x15,x15,514 # 10000202 <__global_pointer$+0xdfffa02>
     ###     path_planned[28] = 0b000100000000000000000000001001;
 19c:	|               04000737          	lui	x14,0x4000
 1a0:	|               00970713          	addi	x14,x14,9 # 4000009 <__global_pointer$+0x1fff809>
     ###     path_planned[29] = 0b010000000000000000001000000010;
 1a4:	|               0af42a23          	sw	x15,180(x8)
     ### 
     ###     // initialize the distance of all vertices to infinity
     ###     for (uint8_t i = 0; i < 4; i++) {
     ###         dist[i] = 0xffffffff;
 1a8:	|               fff00793          	addi	x15,x0,-1
     ###     path_planned[28] = 0b000100000000000000000000001001;
 1ac:	|               0ae42823          	sw	x14,176(x8)
     ###         dist[i] = 0xffffffff;
 1b0:	|               00f42823          	sw	x15,16(x8)
     ###     path_planned[5] = 0b000010000000000000000000000000;
 1b4:	|               04842a23          	sw	x8,84(x8)
     ###         dist[i] = 0xffffffff;
 1b8:	|               00f42a23          	sw	x15,20(x8)
     ###     }
     ### 
     ###     // initialize the distance of the start vertex to 0
     ###     array_write(dist, &START_POINT, 0);
 1bc:	|               00044503          	lbu	x10,0(x8)
     ###         dist[i] = 0xffffffff;
 1c0:	|               00f42c23          	sw	x15,24(x8)
 1c4:	|               00f42e23          	sw	x15,28(x8)
     ###     array_write(dist, &START_POINT, 0);
 1c8:	|               00000593          	addi	x11,x0,0
 1cc:	|               218000ef          	jal	x1,3e4 <array_write.constprop.0.isra.0>
     ###     // initialize the parent of the start vertex to 0xff
     ###     array_write8(prev, &START_POINT, 0xff);
 1d0:	|               00044503          	lbu	x10,0(x8)
 1d4:	|               0ff00593          	addi	x11,x0,255
     ###     for (uint8_t i = 0; i < V - 1; i++) {
     ###         // pick the vertex with the minimum distance from the set of unvisited vertices
     ### 		uint8_t u = minDistance(dist, &visited);
     ### 
     ###         //break if the destination is reached
     ###         if (u == END_POINT) break;
 1d8:	|               02000c37          	lui	x24,0x2000
     ###     array_write8(prev, &START_POINT, 0xff);
 1dc:	|               250000ef          	jal	x1,42c <array_write8.constprop.0.isra.0>
 1e0:	|               01d00413          	addi	x8,x0,29
     ###     uint32_t visited = 0x0; // visited vertices represented as a bit vector
 1e4:	|               00000493          	addi	x9,x0,0
     ###     return ((*n >> (29-*i)) & 1);
 1e8:	|               01d00b13          	addi	x22,x0,29
     ### 	for (uint8_t v = 0; v < V; v++)
 1ec:	|               01e00b93          	addi	x23,x0,30
     ###     *n |= 0x20000000 >> *i;
 1f0:	|               20000d37          	lui	x26,0x20000
     ###         //mark the vertex as visited
     ### 		bit_load(&visited,&u);
     ### 
     ###         // updating the distance of the adjacent unvisited vertices
     ### 		for (uint8_t v = 0; v < V; v++)
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 1f4:	|               040c0d93          	addi	x27,x24,64 # 2000040 <__bss_end+0x40>
     ### int main(int argc, char const *argv[]) {
 1f8:	|  /----------> 00000993          	addi	x19,x0,0
     ### 	int min = INF, min_index;
 1fc:	|  |            00f00a13          	addi	x20,x0,15
     ###     return ((*n >> (29-*i)) & 1);
 200:	|  |     /----> 413b07b3          	sub	x15,x22,x19
 204:	|  |     |      00f4d7b3          	srl	x15,x9,x15
 208:	|  |     |      0017f793          	andi	x15,x15,1
 20c:	|  |     |      0ff9f513          	andi	x10,x19,255
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 210:	|  |     |  /-- 00079a63          	bne	x15,x0,224 <__ram_size+0x124>
 214:	|  |     |  |   194000ef          	jal	x1,3a8 <array_index.constprop.0>
 218:	|  |     |  +-- 00aa4663          	blt	x20,x10,224 <__ram_size+0x124>
     ### 			min = array_index (dist,v), min_index = v;
 21c:	|  |     |  |   00098913          	addi	x18,x19,0
     ### 		if (bit_position(sptSet,&v) == false && array_index (dist,v) <= min)
 220:	|  |     |  |   00050a13          	addi	x20,x10,0 # ff000000 <__global_pointer$+0xfcfff800>
     ### 	for (uint8_t v = 0; v < V; v++)
 224:	|  |     |  \-> 00198993          	addi	x19,x19,1
 228:	|  |     \----- fd799ce3          	bne	x19,x23,200 <__ram_size+0x100>
     ###         if (u == END_POINT) break;
 22c:	|  |            004c4783          	lbu	x15,4(x24)
     ### 	return min_index;
 230:	|  |            0ff97a13          	andi	x20,x18,255
     ###         if (u == END_POINT) break;
 234:	|  |            0ff7f793          	andi	x15,x15,255
 238:	|  |  /-------- 09478863          	beq	x15,x20,2c8 <__ram_size+0x1c8>
     ###     *n |= 0x20000000 >> *i;
 23c:	|  |  |         412d57b3          	sra	x15,x26,x18
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 240:	|  |  |         00291993          	slli	x19,x18,0x2
     ###     *n |= 0x20000000 >> *i;
 244:	|  |  |         00f4e4b3          	or	x9,x9,x15
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 248:	|  |  |         01b989b3          	add	x19,x19,x27
 24c:	|  |  |         00000c93          	addi	x25,x0,0
 250:	|  |  |  /----> 419b0633          	sub	x12,x22,x25
     ###     return ((*n >> (29-*i)) & 1);
 254:	|  |  |  |      00c4d6b3          	srl	x13,x9,x12
 258:	|  |  |  |      0016f693          	andi	x13,x13,1
 25c:	|  |  |  |      0ffcfa93          	andi	x21,x25,255
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 260:	|  |  |  |  /-- 04069a63          	bne	x13,x0,2b4 <__ram_size+0x1b4>
     ###     return ((*n >> (29-*i)) & 1);
 264:	|  |  |  |  |   0009a703          	lw	x14,0(x19)
 268:	|  |  |  |  |   00c75733          	srl	x14,x14,x12
 26c:	|  |  |  |  |   00177713          	andi	x14,x14,1
     ### 			if (!bit_position (&visited,&v) && bit_position (&path_planned[u],&v)   
 270:	|  |  |  |  +-- 04070263          	beq	x14,x0,2b4 <__ram_size+0x1b4>
     ###                                 // if the vertex is not visited (value of current v has never been the value of u) 
     ###                                 //and there is an edge between u and v
     ### 				&& array_index(dist,u) != INF  
 274:	|  |  |  |  |   000a0513          	addi	x10,x20,0
 278:	|  |  |  |  |   130000ef          	jal	x1,3a8 <array_index.constprop.0>
 27c:	|  |  |  |  |   00f00793          	addi	x15,x0,15
 280:	|  |  |  |  |   00a12623          	sw	x10,12(x2)
 284:	|  |  |  |  +-- 02f50863          	beq	x10,x15,2b4 <__ram_size+0x1b4>
     ###                                 // if the distance of u is not infinity
     ### 				&& array_index(dist,u) + bit_position (&path_planned[u],&v) < array_index(dist,v)) 
 288:	|  |  |  |  |   000a8513          	addi	x10,x21,0
 28c:	|  |  |  |  |   11c000ef          	jal	x1,3a8 <array_index.constprop.0>
 290:	|  |  |  |  |   00c12583          	lw	x11,12(x2)
 294:	|  |  |  |  |   00158593          	addi	x11,x11,1
 298:	|  |  |  |  +-- 00a5de63          	bge	x11,x10,2b4 <__ram_size+0x1b4>
     ###                                 // sum of distance to u and edge weight of v-u is 
     ###                                 //less than the distance to v (v is not visited)
     ###                 {
     ###                     array_write(dist,&v,array_index(dist,u) + bit_position (&path_planned[u],&v)); //update the distance of v     
 29c:	|  |  |  |  |   0ff5f593          	andi	x11,x11,255
 2a0:	|  |  |  |  |   000a8513          	addi	x10,x21,0
 2a4:	|  |  |  |  |   140000ef          	jal	x1,3e4 <array_write.constprop.0.isra.0>
     ###                     array_write8(prev,&v, u); //update the parent of v
 2a8:	|  |  |  |  |   000a0593          	addi	x11,x20,0
 2ac:	|  |  |  |  |   000a8513          	addi	x10,x21,0
 2b0:	|  |  |  |  |   17c000ef          	jal	x1,42c <array_write8.constprop.0.isra.0>
     ### 		for (uint8_t v = 0; v < V; v++)
 2b4:	|  |  |  |  \-> 001c8c93          	addi	x25,x25,1
 2b8:	|  |  |  \----- f97c9ce3          	bne	x25,x23,250 <__ram_size+0x150>
     ###     for (uint8_t i = 0; i < V - 1; i++) {
 2bc:	|  |  |         fff40413          	addi	x8,x8,-1
 2c0:	|  |  |         0ff47413          	andi	x8,x8,255
 2c4:	|  \--|-------- f2041ae3          	bne	x8,x0,1f8 <__ram_size+0xf8>
     ###                 }
     ### 	}
     ### 
     ###     // backtracking the path from the destination to the start
     ###     uint8_t currentVertex = END_POINT;
 2c8:	|     \-------> 020007b7          	lui	x15,0x2000
 2cc:	|               0047c703          	lbu	x14,4(x15) # 2000004 <__bss_end+0x4>
     ### 
     ###     path_planned[(idx)++] = currentVertex;
     ###     while (currentVertex != START_POINT) {
 2d0:	|               020005b7          	lui	x11,0x2000
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 2d4:	|               ff000537          	lui	x10,0xff000
     ###     uint8_t currentVertex = END_POINT;
 2d8:	|               0ff77713          	andi	x14,x14,255
     ###     path_planned[(idx)++] = currentVertex;
 2dc:	|               04e7a023          	sw	x14,64(x15)
 2e0:	|               00100793          	addi	x15,x0,1
     ###     while (currentVertex != START_POINT) {
 2e4:	|     /-------> 0005c683          	lbu	x13,0(x11) # 2000000 <__bss_end>
 2e8:	|     |         0ff6f693          	andi	x13,x13,255
 2ec:	|     |  /----- 06e69a63          	bne	x13,x14,360 <__ram_size+0x260>
     ###     }
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = --idx; i >=0; i--) {
 2f0:	|     |  |      fff78793          	addi	x15,x15,-1
 2f4:	|     |  |      0ff7f793          	andi	x15,x15,255
     ###         NODE_POINT = path_planned[i];
 2f8:	|     |  |      02000737          	lui	x14,0x2000
     ###     for (int i = --idx; i >=0; i--) {
 2fc:	|     |  |      fff00613          	addi	x12,x0,-1
     ###         NODE_POINT = path_planned[i];
 300:	|     |  |  /-> 00279693          	slli	x13,x15,0x2
 304:	|     |  |  |   00d706b3          	add	x13,x14,x13
 308:	|     |  |  |   0406c683          	lbu	x13,64(x13)
     ###     for (int i = --idx; i >=0; i--) {
 30c:	|     |  |  |   fff78793          	addi	x15,x15,-1
     ###         NODE_POINT = path_planned[i];
 310:	|     |  |  |   00d70423          	sb	x13,8(x14) # 2000008 <__bss_end+0x8>
     ###     for (int i = --idx; i >=0; i--) {
 314:	|     |  |  \-- fec796e3          	bne	x15,x12,300 <__ram_size+0x200>
     ###     }
     ### 
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 318:	|     |  |      00100793          	addi	x15,x0,1
 31c:	|     |  |      00f70623          	sb	x15,12(x14)
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 320:	\-----|--|----> 04c12083          	lw	x1,76(x2)
 324:	      |  |      04812403          	lw	x8,72(x2)
 328:	      |  |      04412483          	lw	x9,68(x2)
 32c:	      |  |      04012903          	lw	x18,64(x2)
 330:	      |  |      03c12983          	lw	x19,60(x2)
 334:	      |  |      03812a03          	lw	x20,56(x2)
 338:	      |  |      03412a83          	lw	x21,52(x2)
 33c:	      |  |      03012b03          	lw	x22,48(x2)
 340:	      |  |      02c12b83          	lw	x23,44(x2)
 344:	      |  |      02812c03          	lw	x24,40(x2)
 348:	      |  |      02412c83          	lw	x25,36(x2)
 34c:	      |  |      02012d03          	lw	x26,32(x2)
 350:	      |  |      01c12d83          	lw	x27,28(x2)
 354:	      |  |      00000513          	addi	x10,x0,0
 358:	      |  |      05010113          	addi	x2,x2,80
 35c:	      |  |      00008067          	jalr	x0,0(x1)
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 360:	      |  \----> 00377613          	andi	x12,x14,3
 364:	      |         0fc77713          	andi	x14,x14,252
 368:	      |         00e58733          	add	x14,x11,x14
 36c:	      |         02072703          	lw	x14,32(x14)
 370:	      |         00361693          	slli	x13,x12,0x3
 374:	      |         00d556b3          	srl	x13,x10,x13
 378:	      |         fff64613          	xori	x12,x12,-1
 37c:	      |         00e6f6b3          	and	x13,x13,x14
 380:	      |         00361613          	slli	x12,x12,0x3
 384:	      |         00c6d6b3          	srl	x13,x13,x12
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
 388:	      |         00178613          	addi	x12,x15,1
 38c:	      |         00279793          	slli	x15,x15,0x2
 390:	      |         00f587b3          	add	x15,x11,x15
     ###     return (arr[(n & 0xfc)>>2]&(0XFF000000>>((n&0x3)*8)))>>(~(n&0x3)*8); 
 394:	      |         0ff6f713          	andi	x14,x13,255
     ###         path_planned[(idx)++]= currentVertex = array_index8(prev,currentVertex);
 398:	      |         0ff6f693          	andi	x13,x13,255
 39c:	      |         04d7a023          	sw	x13,64(x15)
 3a0:	      |         0ff67793          	andi	x15,x12,255
 3a4:	      \-------- f41ff06f          	jal	x0,2e4 <__ram_size+0x1e4>

000003a8 <array_index.constprop.0>:
     ###     return (arr[(n & 0xf8)>>3]&(0XF0000000>>((n&0x7)*4)))>>(~(n&0x7)*4); 
 3a8:	00757793          	andi	x15,x10,7
 3ac:	00355513          	srli	x10,x10,0x3
 3b0:	00251513          	slli	x10,x10,0x2
 3b4:	02000737          	lui	x14,0x2000
 3b8:	00a70733          	add	x14,x14,x10
 3bc:	01072703          	lw	x14,16(x14) # 2000010 <__bss_end+0x10>
 3c0:	00279693          	slli	x13,x15,0x2
 3c4:	f0000537          	lui	x10,0xf0000
 3c8:	00d55533          	srl	x10,x10,x13
 3cc:	fff7c793          	xori	x15,x15,-1
 3d0:	00e57533          	and	x10,x10,x14
 3d4:	00279793          	slli	x15,x15,0x2
 3d8:	00f55533          	srl	x10,x10,x15
     ### } 
 3dc:	0ff57513          	andi	x10,x10,255
 3e0:	00008067          	jalr	x0,0(x1)

000003e4 <array_write.constprop.0.isra.0>:
     ###     arr[(*n & 0xf8)>>3] = (arr[(*n & 0xf8)>>3]&~(0XF0000000>>((*n&0x7)*4))) | (val << (~(*n&0x7)*4));
 3e4:	00355713          	srli	x14,x10,0x3
 3e8:	020007b7          	lui	x15,0x2000
 3ec:	01078793          	addi	x15,x15,16 # 2000010 <__bss_end+0x10>
 3f0:	00757513          	andi	x10,x10,7
 3f4:	00271713          	slli	x14,x14,0x2
 3f8:	00f70733          	add	x14,x14,x15
 3fc:	00251693          	slli	x13,x10,0x2
 400:	f00007b7          	lui	x15,0xf0000
 404:	00d7d7b3          	srl	x15,x15,x13
 408:	00072683          	lw	x13,0(x14)
 40c:	fff54513          	xori	x10,x10,-1
 410:	fff7c793          	xori	x15,x15,-1
 414:	00251513          	slli	x10,x10,0x2
 418:	00d7f7b3          	and	x15,x15,x13
 41c:	00a59533          	sll	x10,x11,x10
 420:	00a7e7b3          	or	x15,x15,x10
 424:	00f72023          	sw	x15,0(x14)
     ### }
 428:	00008067          	jalr	x0,0(x1)

0000042c <array_write8.constprop.0.isra.0>:
     ###     arr[(*n & 0xfc)>>2] = (arr[(*n & 0xfc)>>2]&~(0XFF000000>>((*n&0x3)*8))) | (val << (~(*n&0x3)*8));
 42c:	020007b7          	lui	x15,0x2000
 430:	0fc57713          	andi	x14,x10,252
 434:	02078793          	addi	x15,x15,32 # 2000020 <__bss_end+0x20>
 438:	00357513          	andi	x10,x10,3
 43c:	00f70733          	add	x14,x14,x15
 440:	00351693          	slli	x13,x10,0x3
 444:	ff0007b7          	lui	x15,0xff000
 448:	00d7d7b3          	srl	x15,x15,x13
 44c:	00072683          	lw	x13,0(x14)
 450:	fff54513          	xori	x10,x10,-1
 454:	fff7c793          	xori	x15,x15,-1
 458:	00351513          	slli	x10,x10,0x3
 45c:	00d7f7b3          	and	x15,x15,x13
 460:	00a59533          	sll	x10,x11,x10
 464:	00a7e7b3          	or	x15,x15,x10
 468:	00f72023          	sw	x15,0(x14)
     ### }
 46c:	00008067          	jalr	x0,0(x1)

00000470 <_set_tls>:
 470:	00050213          	addi	x4,x10,0
 474:	00008067          	jalr	x0,0(x1)

00000478 <memcpy>:
 478:	       00050313          	addi	x6,x10,0
 47c:	/----- 00060e63          	beq	x12,x0,498 <memcpy+0x20>
 480:	|  /-> 00058383          	lb	x7,0(x11)
 484:	|  |   00730023          	sb	x7,0(x6)
 488:	|  |   fff60613          	addi	x12,x12,-1
 48c:	|  |   00130313          	addi	x6,x6,1
 490:	|  |   00158593          	addi	x11,x11,1
 494:	|  \-- fe0616e3          	bne	x12,x0,480 <memcpy+0x8>
 498:	\----> 00008067          	jalr	x0,0(x1)

0000049c <memset>:
 49c:	       00050313          	addi	x6,x10,0
 4a0:	/----- 00060a63          	beq	x12,x0,4b4 <memset+0x18>
 4a4:	|  /-> 00b30023          	sb	x11,0(x6)
 4a8:	|  |   fff60613          	addi	x12,x12,-1
 4ac:	|  |   00130313          	addi	x6,x6,1
 4b0:	|  \-- fe061ae3          	bne	x12,x0,4a4 <memset+0x8>
 4b4:	\----> 00008067          	jalr	x0,0(x1)
